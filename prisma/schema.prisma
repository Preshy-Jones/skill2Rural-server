generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                                Int              @id @default(autoincrement())
  name                              String?
  email                             String           @unique
  password                          String?
  type                              Type             @default(STUDENT)
  organisation                      String?
  no_of_students_to_reach           Int?
  work_with_maginalized_populations Boolean?
  profile_photo                     String?
  createdAt                         DateTime         @default(now())
  updatedAt                         DateTime         @updatedAt
  CourseProgress                    CourseProgress[]
  CourseReview                      CourseReview[]
  Quiz                              Quiz[]
  Certificate                       Certificate[]
  status                            UserStatus       @default(ACTIVE)
}

model Educator {
  id                                Int      @id @default(autoincrement())
  name                              String?
  email                             String   @unique
  password                          String?
  organisation                      String?
  role                              String?
  no_of_students_to_reach           Int?
  work_with_maginalized_populations Boolean?
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
}

enum Type {
  STUDENT
  EDUCATOR
}

enum CourseType {
  FREE
  PAID
}

model Course {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  thumbnail_image String
  video_url   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  duration    Int
  objectives  String[]
  reviews     CourseReview[]
  progress    CourseProgress[]
  questions   CourseQuestion[]
  Quiz        Quiz[]
  Certificate Certificate[]
  status      CourseStatus     @default(INACTIVE)
  publishedBy Admin?           @relation(fields: [publishedById], references: [id])
  publishedById Int?
  type        CourseType       @default(FREE)
}

model CourseProgress {
  id        Int      @id @default(autoincrement())
  progressPercentage  Int
  lastWatchedTime    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  completedDateTime DateTime?
}

model CourseReview {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model CourseQuestion {
  id        Int      @id @default(autoincrement())
  question  String
  answer    Int 
  point     Int
  options   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
}

model AccountRecovery {
  id        Int      @id @default(autoincrement())
  userId    Int
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Quiz {
  id        Int      @id @default(autoincrement())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  gradeInPercentage Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Certificate {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  gradeInPercentage Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Admin {
  id                                Int              @id @default(autoincrement())
  name                              String?
  email                             String           @unique
  password                          String?
  status                           AdminStatus      @default(ACTIVE)
  profile_photo                     String?
  Course Course[]
  createdAt                         DateTime         @default(now())
  updatedAt                         DateTime         @updatedAt
}

enum AdminStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DEACTIVATED
  DELETED
}

enum CourseStatus {
  ACTIVE
  ARCHIVED
  INACTIVE
  DELETED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DEACTIVATED
  DELETED
}
model Conversation {
 id           Int      @id @default(autoincrement()) 
 phoneNumber  String   
 createdAt    DateTime @default(now())
 lastMessageAt DateTime @updatedAt
 isActive     Boolean  @default(true)
 Message Message[]

 ConversationState ConversationState[]

 StateTransition StateTransition[]
}

model Message {
 id            Int          @id @default(autoincrement())
  role          String
  content       String
  conversation  Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}


model ConversationState {
  id              Int      @id @default(autoincrement())
  conversationId  Int      @unique
  stateData      String   // JSON string of state data
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model StateTransition {
  id             Int      @id @default(autoincrement())
  conversationId Int
  fromState      String
  toState        String
  timestamp      DateTime
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}